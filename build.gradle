plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.gdscsmwu.solutionchallenge'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

// build.gradle 내부에서 사용되는 설정을 정의한다.
configurations {
	//lombok 설정 추가
	compileOnly {
		// 여기서는 compileOnly가 annotationProcessor를 상속하도록 설정했다.
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// lombok 라이브러리
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// lombok 테스트 라이브러리
	testImplementation 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// 프로젝트에 Spring Data Jpa 적용
	// spring-boot-starter-data-jpa
	// - 스프링 부트용 Spring Data Jpa 추상화 라이브러리
	// - 스프링 부트 버전에 맞춰 자동으로 JPA 관련 라이브러리들의 버전을 관리
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// h2
	// - 인메모리 관계형 데이터베이스
	// - 별도의 설치가 필요 없이 프로젝트 의존성만으로 관리할 수 있다.
	// - 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용
	// - 이 책에서는 JPA의 테스트, 로컬 환경에서의 구동에서 사용할 예정
	implementation 'com.h2database:h2'

	// session
	implementation 'org.springframework.session:spring-session-jdbc'
	// 애플리케이션을 실행해서 로그인을 테스트한 뒤, h2-console로 접속한다.
	// h2-console을 보면 세션을 위한 테이블 2개(SPRING_SESSION, SPRING_SESSION_ATTRIBUTES)가 생성된 것을 볼 수 있다.
	// JPA로 인해 세션 테이블이 자동 생성되었기 때문에 별도로 해야 할 일은 없다.
	// 방금 로그인했기 때문에 한 개의 세션이 등록돼있는 것을 볼 수 있다.
	// 세션 저장소를 데이터베이스로 교체했다.
	// 물론 지금은 기존과 동일하게 스프링을 재시작하면 세션이 풀린다.
	// 이유는 H2 기반으로 스프링이 재실행될 때 H2도 재시작되기 때문이다.
	// 이후 AWS로 배포하게 되면 AWS의 데이터베이스 서비스인 RDS(Relational Database Service)를 사용하게 되니 이때부터는 세션이 풀리지 않는다.

	// 먼저 MariaDB 드라이버를 build.gradle에 등록한다.
	// 현재는 H2 드라이버만 있는 상태이다.
	implementation 'org.mariadb.jdbc:mariadb-java-client'
}

tasks.named('test') {
	useJUnitPlatform()
}



jar {
	enabled=false
}